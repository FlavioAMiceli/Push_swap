Quicksort:
	Generally best to use.
	Unstable, doesn't preserve order of same value keys.
	Uses some additional memory.
	Amendable to parallelization.

Mergesort:
	Generally best option for sorting linked lists.
	Stable.
	Adaptive.
	Amendable to parallelization.
	Uses more extra memory than heapsort.

Heapsort:
	Good selection based algorithm. Has a better worst-case than quicksort.
	On devices where writes are expensive, selection based algorithms perform
	better than insertion based ones. Heapsort, like quicksort, is unstable.
	Heapsort performs better on embedded devices or places where security is a
	risk than quicksort, since it's worst case is better and won't slow down
	real time applications as much as quickosrt on (deliberate) difficult
	large arrays.

Insertionsort:
	Good for small lists. Usable as basecase for recursion based algorithms.
	Uses many writes.

Shellsort:
	Good exchange/insertion style algorithm.
	Adaptive, faster for already sorted lists.
	Choosing a good gap sequence is non-trivial.
